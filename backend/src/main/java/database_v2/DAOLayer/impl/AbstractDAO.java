package database_v2.DAOLayer.impl;

import database_v2.controlLayer.DataAccessProvider;
import java.sql.*;

/**
 * This abstract class performs some basic operations needed for every DAO that
 * connects with the relational database.
 */
public abstract class AbstractDAO {

    /**
     * An open connection to a relational database.
     */
    protected Connection connection;

    /**
     * A reference to the DataAccessProvider, an abstraction of the entire
     * database component.
     */
    protected DataAccessProvider dap;

    /**
     * Save a reference to the open connection and the DataAccessProvider that
     * created the DataAccessContext of this DAO.
     *
     * @param connection An open connection to a relational database.
     * @param dap A reference to the DataAccessProvider, an abstraction of the
     * entire database component.
     */
    public AbstractDAO(Connection connection, DataAccessProvider dap) {
        this.connection = connection;
        this.dap = dap;
    }

    /**
     * Syntactic sugar for a PreparedStatement that is supposed to give back the
     * newly created id of a new record.
     *
     * @param sql The sql statement in string form that must be prepared. This
     * must be an insert statement, or equivalent, that returns newly assigned
     * id's.
     * @return A PreparedStatement of the sql statement.
     * @throws SQLException Something went wrong with the underlying database.
     */
    protected PreparedStatement prepareAutoGenerated(String sql) throws SQLException {
        return connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
    }

}
